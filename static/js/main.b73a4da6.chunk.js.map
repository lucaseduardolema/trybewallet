{"version":3,"sources":["redux/actions/index.js","pages/Login.js","components/Header.js","components/Table.js","components/WalletForm.js","pages/Wallet.js","App.js","serviceWorker.js","redux/reducers/user.js","redux/reducers/wallet.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["addExpenseAction","id","store","payload","type","Login","handleChange","target","name","value","setState","state","email","password","isValidEmail","test","isValidPassword","length","disabled","handleClick","props","history","emailDispatch","push","this","className","data-testid","placeholder","onChange","onClick","React","Component","connect","dispatch","userAction","Header","expenses","reduce","acc","currency","exchangeRates","parseFloat","ask","toFixed","user","wallet","Table","deleteDispatch","editDispatch","parseInt","map","description","method","tag","key","includes","Math","round","deleteExpenseAction","editExpenseAction","WalletForm","dispatchExpense","editor","dispatchSaveEdit","idToEdit","idIndex","fetchDispatch","currencies","htmlFor","min","code","fetch","response","json","data","addExpenseFetch","saveEditAction","Wallet","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","Object","keys","filter","expense","rootReducer","combineReducers","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b73a4da6.chunk.js","sourcesContent":["export const USER_TYPE = 'USER_TYPE';\nexport const REQUEST_API = 'REQUEST_API';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\nexport const SAVE_EDIT = 'SAVE_EDIT';\n\nexport const userAction = (email) => ({\n  type: USER_TYPE,\n  email,\n});\n\nexport const requstApiAction = (payload) => ({\n  type: REQUEST_API,\n  payload,\n});\n\nexport const addExpenseAction = (id, store, payload) => ({\n  type: ADD_EXPENSE,\n  payload,\n  id,\n  store,\n});\n\nexport const deleteExpenseAction = (id) => ({\n  type: DELETE_EXPENSE,\n  id,\n});\n\nexport const editExpenseAction = (id) => ({\n  type: EDIT_EXPENSE,\n  id,\n});\n\nexport const saveEditAction = (id, store) => ({\n  type: SAVE_EDIT,\n  id,\n  store,\n});\n\nexport const fetchAPI = () => async (dispatch) => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await response.json();\n  return dispatch(requstApiAction(data));\n};\n\nexport const addExpenseFetch = (id, store) => async (dispatch) => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await response.json();\n  return dispatch(addExpenseAction(id, store, data));\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { userAction } from '../redux/actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      disabled: true,\n    };\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({\n      [name]: value,\n    }, () => {\n      const { email, password } = this.state;\n      const minCharPass = 6;\n      const isValidEmail = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(email);\n      // regex usado desta fonte: https://www.w3resource.com/javascript/form/email-validation.php#:~:text=To%20get%20a%20valid%20email,%5D%2B)*%24%2F.\n      const isValidPassword = password.length >= minCharPass;\n      if (isValidEmail && isValidPassword) {\n        this.setState({\n          disabled: false,\n        });\n      } else {\n        this.setState({\n          disabled: true,\n        });\n      }\n    });\n  };\n\n  handleClick = () => {\n    const { email } = this.state;\n    const { history, emailDispatch } = this.props;\n    emailDispatch(email);\n    history.push('/trybewallet/carteira');\n  };\n\n  render() {\n    const { email, password, disabled } = this.state;\n    return (\n      <div className=\"login\">\n        <div className=\"background\">\n          <div className=\"shape\" />\n          <div className=\"shape\" />\n        </div>\n        <form>\n          <h2>Trybewallet</h2>\n          <h3>Login Here</h3>\n          <input\n            data-testid=\"email-input\"\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"E-mail\"\n            value={ email }\n            onChange={ this.handleChange }\n          />\n          <input\n            data-testid=\"password-input\"\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Senha\"\n            value={ password }\n            onChange={ this.handleChange }\n          />\n          <button type=\"button\" disabled={ disabled } onClick={ this.handleClick }>\n            Entrar\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  emailDispatch: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  emailDispatch: (email) => dispatch(userAction(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Header extends Component {\n  render() {\n    const { email, expenses } = this.props;\n    return (\n      <header className=\"flex-container\">\n        <div className=\"projec-name\">\n          <h1>\n            <span>Trybe</span>\n            wallet\n          </h1>\n        </div>\n        <div className=\"user-info\">\n          <p data-testid=\"email-field\">{email}</p>\n          <div className=\"display-values\">\n            <p>Total gasto</p>\n            <p data-testid=\"total-field\">\n              { !expenses.length > 0 ? '0.00' : (\n                expenses.reduce((acc, { currency, exchangeRates, value }) => {\n                  acc += (parseFloat(exchangeRates[currency].ask * value));\n                  return acc;\n                }, 0)\n              ).toFixed(2) }\n            </p>\n            <p data-testid=\"header-currency-field\">BRL</p>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n  })).isRequired,\n};\n\nconst mapStateToProps = ({ user: { email }, wallet: { expenses } }) => ({\n  email,\n  expenses,\n});\n\nexport default connect(mapStateToProps, null)(Header);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { deleteExpenseAction, editExpenseAction } from '../redux/actions';\n\nclass Table extends Component {\n  handleClick = ({ target: { name, value } }) => {\n    const { deleteDispatch, editDispatch } = this.props;\n    value = parseInt(value, 10);\n    if (name === 'delete') {\n      deleteDispatch(value);\n    }\n    if (name === 'edit') {\n      editDispatch(value);\n    }\n  };\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <div className=\"table-wrapper\">\n        <table className=\"fl-table\">\n          <thead>\n            <tr>\n              <th>Valor</th>\n              <th>Descrição</th>\n              <th>Moeda</th>\n              <th>Método de pagamento</th>\n              <th>Tag</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            {expenses.map(\n              ({\n                id,\n                value,\n                description,\n                method,\n                tag,\n                currency,\n                exchangeRates,\n              }) => (\n                <tr key={ id }>\n                  <td>{value.includes('.') ? value : `${value}.00`}</td>\n                  <td>{description}</td>\n                  <td>{exchangeRates[currency].name}</td>\n                  <td>{method}</td>\n                  <td>{tag}</td>\n                  <td>\n                    {Math.round(parseFloat(exchangeRates[currency].ask) * 100)\n                    / 100}\n                  </td>\n                  <td>\n                    {Math.round(\n                      parseFloat(exchangeRates[currency].ask)\n                      * parseFloat(value)\n                      * 100,\n                    ) / 100}\n                  </td>\n                  <td>Real</td>\n                  <td className=\"edi-del-buttons\">\n                    <button\n                      className=\"edit-btn\"\n                      data-testid=\"edit-btn\"\n                      name=\"edit\"\n                      value={ id }\n                      type=\"button\"\n                      onClick={ this.handleClick }\n                    >\n                      Editar\n                    </button>\n                    <button\n                      className=\"delete-btn\"\n                      data-testid=\"delete-btn\"\n                      name=\"delete\"\n                      value={ id }\n                      type=\"button\"\n                      onClick={ this.handleClick }\n                    >\n                      Excluir\n                    </button>\n                  </td>\n                </tr>\n              ),\n            )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nTable.propTypes = {\n  deleteDispatch: PropTypes.func.isRequired,\n  editDispatch: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    value: PropTypes.string,\n    description: PropTypes.string,\n    method: PropTypes.string,\n    tag: PropTypes.string,\n    currency: PropTypes.string,\n  })).isRequired,\n};\n\nconst mapStateToProps = ({ wallet: { expenses } }) => ({\n  expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteDispatch: (id) => dispatch(deleteExpenseAction(id)),\n  editDispatch: (id) => dispatch(editExpenseAction(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addExpenseFetch, fetchAPI, saveEditAction } from '../redux/actions';\n\nclass WalletForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: '',\n      description: '',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      currency: 'USD',\n    };\n  }\n\n  componentDidMount() {\n    const { fetchDispatch } = this.props;\n    fetchDispatch();\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleClick = () => {\n    const { dispatchExpense, expenses, editor, dispatchSaveEdit, idToEdit } = this.props;\n    const idIndex = expenses.length;\n    if (editor) {\n      dispatchSaveEdit(idToEdit, this.state);\n      this.setState({\n        value: '',\n        description: '',\n      });\n    } else {\n      dispatchExpense(idIndex, this.state);\n      this.setState({\n        value: '',\n        description: '',\n      });\n    }\n  };\n\n  render() {\n    const { value, description, method, tag, currency } = this.state;\n    const { currencies, editor } = this.props;\n    return (\n      <form className=\"wallet-form\">\n        <label htmlFor=\"value\" className=\"omrs-input-filled\">\n          Valor\n          <input\n            id=\"value\"\n            data-testid=\"value-input\"\n            type=\"number\"\n            name=\"value\"\n            value={ value }\n            onChange={ this.handleChange }\n            min=\"0\"\n          />\n          <span className=\"omrs-input-helper\">Valor gasto na moeda local</span>\n        </label>\n        <label htmlFor=\"description\" className=\"omrs-input-filled\">\n          Descrição\n          <input\n            id=\"description\"\n            data-testid=\"description-input\"\n            type=\"text\"\n            name=\"description\"\n            value={ description }\n            onChange={ this.handleChange }\n          />\n          <span className=\"omrs-input-helper\">\n            Descreva informações sobre o gasto\n          </span>\n        </label>\n        <label htmlFor=\"currency\">\n          Moeda usada\n          <select\n            id=\"currency\"\n            data-testid=\"currency-input\"\n            name=\"currency\"\n            onChange={ this.handleChange }\n            value={ currency }\n          >\n            {currencies.map((code) => (\n              <option key={ code }>{code}</option>\n            ))}\n          </select>\n        </label>\n        <label htmlFor=\"method\">\n          Meio usado\n          <select\n            id=\"method\"\n            data-testid=\"method-input\"\n            name=\"method\"\n            onChange={ this.handleChange }\n            value={ method }\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          Tag\n          <select\n            id=\"tag\"\n            data-testid=\"tag-input\"\n            name=\"tag\"\n            onChange={ this.handleChange }\n            value={ tag }\n          >\n            <option value=\"Alimentação\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n        {editor ? (\n          <button\n            data-testid=\"save-edit\"\n            type=\"button\"\n            onClick={ this.handleClick }\n          >\n            Editar despesa\n          </button>\n        ) : (\n          <button\n            data-testid=\"add-expense\"\n            type=\"button\"\n            onClick={ this.handleClick }\n          >\n            Adicionar despesa\n          </button>\n        )}\n      </form>\n    );\n  }\n}\n\nWalletForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  dispatchExpense: PropTypes.func.isRequired,\n  dispatchSaveEdit: PropTypes.func.isRequired,\n  editor: PropTypes.bool.isRequired,\n  expenses: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n    }),\n  ).isRequired,\n  fetchDispatch: PropTypes.func.isRequired,\n  idToEdit: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = ({\n  wallet: { currencies, expenses, editor, idToEdit },\n}) => ({\n  currencies,\n  expenses,\n  editor,\n  idToEdit,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchDispatch: () => dispatch(fetchAPI()),\n  dispatchExpense: (id, state) => dispatch(addExpenseFetch(id, state)),\n  dispatchSaveEdit: (id, state) => dispatch(saveEditAction(id, state)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletForm);\n","import React from 'react';\nimport Header from '../components/Header';\nimport Table from '../components/Table';\nimport WalletForm from '../components/WalletForm';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <WalletForm />\n        <Table />\n      </div>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/trybewallet\" component={ Login } />\n      <Route path=\"/trybewallet/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { USER_TYPE } from '../actions';\n\n// Esse reducer será responsável por tratar as informações da pessoa usuária\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, { type, email }) => {\n  switch (type) {\n  case USER_TYPE:\n    return {\n      email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import {\n  ADD_EXPENSE,\n  DELETE_EXPENSE,\n  EDIT_EXPENSE,\n  REQUEST_API,\n  SAVE_EDIT,\n} from '../actions';\n\n// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  editor: false,\n  idToEdit: 0,\n};\n\nconst wallet = (state = INITIAL_STATE, { type, payload, id, store }) => {\n  switch (type) {\n  case REQUEST_API:\n    return {\n      ...state,\n      currencies: Object.keys(payload).filter((code) => code !== 'USDT'),\n    };\n  case ADD_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses, { id, ...store, exchangeRates: payload }],\n    };\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses].filter((expense) => expense.id !== id),\n    };\n  case EDIT_EXPENSE:\n    return {\n      ...state,\n      editor: true,\n      idToEdit: id,\n    };\n  case SAVE_EDIT:\n    state.expenses[id].value = store.value;\n    state.expenses[id].description = store.description;\n    state.expenses[id].method = store.method;\n    state.expenses[id].tag = store.tag;\n    state.expenses[id].currency = store.currency;\n    return {\n      ...state,\n      expenses: [\n        state.expenses[id],\n        ...state.expenses.filter((expense) => expense.id !== id),\n      ],\n      editor: false,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}